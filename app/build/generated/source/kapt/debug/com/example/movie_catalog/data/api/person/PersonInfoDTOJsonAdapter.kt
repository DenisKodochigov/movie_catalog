// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.movie_catalog.`data`.api.person

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class PersonInfoDTOJsonAdapter(
  moshi: Moshi
) : JsonAdapter<PersonInfoDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("personId", "webUrl", "nameRu",
      "nameEn", "sex", "posterUrl", "growth", "birthday", "death", "age", "birthplace",
      "deathplace", "spouses", "hasAwards", "profession", "facts", "films")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "personId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "webUrl")

  private val listOfSpousesAdapter: JsonAdapter<List<Spouses>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Spouses::class.java), emptySet(),
      "spouses")

  private val listOfStringAdapter: JsonAdapter<List<String>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "facts")

  private val listOfPersonFilmDTOAdapter: JsonAdapter<List<PersonFilmDTO>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, PersonFilmDTO::class.java),
      emptySet(), "films")

  @Volatile
  private var constructorRef: Constructor<PersonInfoDTO>? = null

  public override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("PersonInfoDTO").append(')') }

  public override fun fromJson(reader: JsonReader): PersonInfoDTO {
    var personId: Int? = null
    var webUrl: String? = null
    var nameRu: String? = null
    var nameEn: String? = null
    var sex: String? = null
    var posterUrl: String? = null
    var growth: Int? = null
    var birthday: String? = null
    var death: String? = null
    var age: String? = null
    var birthplace: String? = null
    var deathplace: String? = null
    var spouses: List<Spouses>? = null
    var hasAwards: Int? = null
    var profession: String? = null
    var facts: List<String>? = null
    var films: List<PersonFilmDTO>? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          personId = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          webUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          nameRu = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          nameEn = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          sex = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          posterUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          growth = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          birthday = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          death = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          age = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          birthplace = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          deathplace = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          spouses = listOfSpousesAdapter.fromJson(reader) ?: throw Util.unexpectedNull("spouses",
              "spouses", reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          hasAwards = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          profession = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          facts = listOfStringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("facts",
              "facts", reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          films = listOfPersonFilmDTOAdapter.fromJson(reader) ?: throw Util.unexpectedNull("films",
              "films", reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffe0000.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  PersonInfoDTO(
          personId = personId,
          webUrl = webUrl,
          nameRu = nameRu,
          nameEn = nameEn,
          sex = sex,
          posterUrl = posterUrl,
          growth = growth,
          birthday = birthday,
          death = death,
          age = age,
          birthplace = birthplace,
          deathplace = deathplace,
          spouses = spouses as List<Spouses>,
          hasAwards = hasAwards,
          profession = profession,
          facts = facts as List<String>,
          films = films as List<PersonFilmDTO>
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<PersonInfoDTO> = this.constructorRef ?:
          PersonInfoDTO::class.java.getDeclaredConstructor(Int::class.javaObjectType,
          String::class.java, String::class.java, String::class.java, String::class.java,
          String::class.java, Int::class.javaObjectType, String::class.java, String::class.java,
          String::class.java, String::class.java, String::class.java, List::class.java,
          Int::class.javaObjectType, String::class.java, List::class.java, List::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          personId,
          webUrl,
          nameRu,
          nameEn,
          sex,
          posterUrl,
          growth,
          birthday,
          death,
          age,
          birthplace,
          deathplace,
          spouses,
          hasAwards,
          profession,
          facts,
          films,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: PersonInfoDTO?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("personId")
    nullableIntAdapter.toJson(writer, value_.personId)
    writer.name("webUrl")
    nullableStringAdapter.toJson(writer, value_.webUrl)
    writer.name("nameRu")
    nullableStringAdapter.toJson(writer, value_.nameRu)
    writer.name("nameEn")
    nullableStringAdapter.toJson(writer, value_.nameEn)
    writer.name("sex")
    nullableStringAdapter.toJson(writer, value_.sex)
    writer.name("posterUrl")
    nullableStringAdapter.toJson(writer, value_.posterUrl)
    writer.name("growth")
    nullableIntAdapter.toJson(writer, value_.growth)
    writer.name("birthday")
    nullableStringAdapter.toJson(writer, value_.birthday)
    writer.name("death")
    nullableStringAdapter.toJson(writer, value_.death)
    writer.name("age")
    nullableStringAdapter.toJson(writer, value_.age)
    writer.name("birthplace")
    nullableStringAdapter.toJson(writer, value_.birthplace)
    writer.name("deathplace")
    nullableStringAdapter.toJson(writer, value_.deathplace)
    writer.name("spouses")
    listOfSpousesAdapter.toJson(writer, value_.spouses)
    writer.name("hasAwards")
    nullableIntAdapter.toJson(writer, value_.hasAwards)
    writer.name("profession")
    nullableStringAdapter.toJson(writer, value_.profession)
    writer.name("facts")
    listOfStringAdapter.toJson(writer, value_.facts)
    writer.name("films")
    listOfPersonFilmDTOAdapter.toJson(writer, value_.films)
    writer.endObject()
  }
}
