// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.movie_catalog.`data`.api.film_info

import com.example.movie_catalog.entity.home.Country
import com.example.movie_catalog.entity.home.Genre
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class FilmInfoDTOJsonAdapter(
  moshi: Moshi
) : JsonAdapter<FilmInfoDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("kinopoiskId", "imdbId", "nameRu",
      "nameEn", "nameOriginal", "posterUrl", "posterUrlPreview", "coverUrl", "logoUrl",
      "reviewsCount", "ratingGoodReview", "ratingGoodReviewVoteCount", "ratingKinopoisk",
      "ratingKinopoiskVoteCount", "ratingImdb", "ratingImdbVoteCount", "ratingFilmCritics",
      "ratingFilmCriticsVoteCount", "ratingAwait", "ratingAwaitCount", "ratingRfCritics",
      "ratingRfCriticsVoteCount", "webUrl", "year", "filmLength", "slogan", "description",
      "shortDescription", "editorAnnotation", "isTicketsAvailable", "productionStatus", "type",
      "ratingMpaa", "ratingAgeLimits", "countries", "genres", "startYear", "endYear", "serial",
      "shortFilm", "completed", "hasImax", "has3D", "lastSync")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "kinopoiskId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "imdbId")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "ratingGoodReview")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "isTicketsAvailable")

  private val nullableListOfCountryAdapter: JsonAdapter<List<Country>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Country::class.java), emptySet(),
      "countries")

  private val nullableListOfGenreAdapter: JsonAdapter<List<Genre>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Genre::class.java), emptySet(),
      "genres")

  @Volatile
  private var constructorRef: Constructor<FilmInfoDTO>? = null

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("FilmInfoDTO").append(')') }

  public override fun fromJson(reader: JsonReader): FilmInfoDTO {
    var kinopoiskId: Int? = null
    var imdbId: String? = null
    var nameRu: String? = null
    var nameEn: String? = null
    var nameOriginal: String? = null
    var posterUrl: String? = null
    var posterUrlPreview: String? = null
    var coverUrl: String? = null
    var logoUrl: String? = null
    var reviewsCount: Int? = null
    var ratingGoodReview: Double? = null
    var ratingGoodReviewVoteCount: Int? = null
    var ratingKinopoisk: Double? = null
    var ratingKinopoiskVoteCount: String? = null
    var ratingImdb: Double? = null
    var ratingImdbVoteCount: Int? = null
    var ratingFilmCritics: Double? = null
    var ratingFilmCriticsVoteCount: Int? = null
    var ratingAwait: Double? = null
    var ratingAwaitCount: Int? = null
    var ratingRfCritics: Double? = null
    var ratingRfCriticsVoteCount: Int? = null
    var webUrl: String? = null
    var year: Int? = null
    var filmLength: Int? = null
    var slogan: String? = null
    var description: String? = null
    var shortDescription: String? = null
    var editorAnnotation: String? = null
    var isTicketsAvailable: Boolean? = null
    var productionStatus: String? = null
    var type: String? = null
    var ratingMpaa: String? = null
    var ratingAgeLimits: String? = null
    var countries: List<Country>? = null
    var genres: List<Genre>? = null
    var startYear: String? = null
    var endYear: String? = null
    var serial: Boolean? = null
    var shortFilm: Boolean? = null
    var completed: Boolean? = null
    var hasImax: Boolean? = null
    var has3D: Boolean? = null
    var lastSync: String? = null
    var mask0 = -1
    var mask1 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          kinopoiskId = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          imdbId = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          nameRu = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          nameEn = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          nameOriginal = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          posterUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          posterUrlPreview = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          coverUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          logoUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          reviewsCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          ratingGoodReview = nullableDoubleAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          ratingGoodReviewVoteCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          ratingKinopoisk = nullableDoubleAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          ratingKinopoiskVoteCount = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          ratingImdb = nullableDoubleAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          ratingImdbVoteCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          ratingFilmCritics = nullableDoubleAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        17 -> {
          ratingFilmCriticsVoteCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 17).inv()
          mask0 = mask0 and 0xfffdffff.toInt()
        }
        18 -> {
          ratingAwait = nullableDoubleAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 18).inv()
          mask0 = mask0 and 0xfffbffff.toInt()
        }
        19 -> {
          ratingAwaitCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 19).inv()
          mask0 = mask0 and 0xfff7ffff.toInt()
        }
        20 -> {
          ratingRfCritics = nullableDoubleAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 20).inv()
          mask0 = mask0 and 0xffefffff.toInt()
        }
        21 -> {
          ratingRfCriticsVoteCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 21).inv()
          mask0 = mask0 and 0xffdfffff.toInt()
        }
        22 -> {
          webUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 22).inv()
          mask0 = mask0 and 0xffbfffff.toInt()
        }
        23 -> {
          year = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 23).inv()
          mask0 = mask0 and 0xff7fffff.toInt()
        }
        24 -> {
          filmLength = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 24).inv()
          mask0 = mask0 and 0xfeffffff.toInt()
        }
        25 -> {
          slogan = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 25).inv()
          mask0 = mask0 and 0xfdffffff.toInt()
        }
        26 -> {
          description = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 26).inv()
          mask0 = mask0 and 0xfbffffff.toInt()
        }
        27 -> {
          shortDescription = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 27).inv()
          mask0 = mask0 and 0xf7ffffff.toInt()
        }
        28 -> {
          editorAnnotation = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 28).inv()
          mask0 = mask0 and 0xefffffff.toInt()
        }
        29 -> {
          isTicketsAvailable = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 29).inv()
          mask0 = mask0 and 0xdfffffff.toInt()
        }
        30 -> {
          productionStatus = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 30).inv()
          mask0 = mask0 and 0xbfffffff.toInt()
        }
        31 -> {
          type = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 31).inv()
          mask0 = mask0 and 0x7fffffff.toInt()
        }
        32 -> {
          ratingMpaa = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask1 = mask1 and 0xfffffffe.toInt()
        }
        33 -> {
          ratingAgeLimits = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask1 = mask1 and 0xfffffffd.toInt()
        }
        34 -> {
          countries = nullableListOfCountryAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask1 = mask1 and 0xfffffffb.toInt()
        }
        35 -> {
          genres = nullableListOfGenreAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask1 = mask1 and 0xfffffff7.toInt()
        }
        36 -> {
          startYear = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask1 = mask1 and 0xffffffef.toInt()
        }
        37 -> {
          endYear = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask1 = mask1 and 0xffffffdf.toInt()
        }
        38 -> {
          serial = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask1 = mask1 and 0xffffffbf.toInt()
        }
        39 -> {
          shortFilm = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask1 = mask1 and 0xffffff7f.toInt()
        }
        40 -> {
          completed = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask1 = mask1 and 0xfffffeff.toInt()
        }
        41 -> {
          hasImax = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask1 = mask1 and 0xfffffdff.toInt()
        }
        42 -> {
          has3D = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask1 = mask1 and 0xfffffbff.toInt()
        }
        43 -> {
          lastSync = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask1 = mask1 and 0xfffff7ff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0x0.toInt() && mask1 == 0xfffff000.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  FilmInfoDTO(
          kinopoiskId = kinopoiskId,
          imdbId = imdbId,
          nameRu = nameRu,
          nameEn = nameEn,
          nameOriginal = nameOriginal,
          posterUrl = posterUrl,
          posterUrlPreview = posterUrlPreview,
          coverUrl = coverUrl,
          logoUrl = logoUrl,
          reviewsCount = reviewsCount,
          ratingGoodReview = ratingGoodReview,
          ratingGoodReviewVoteCount = ratingGoodReviewVoteCount,
          ratingKinopoisk = ratingKinopoisk,
          ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
          ratingImdb = ratingImdb,
          ratingImdbVoteCount = ratingImdbVoteCount,
          ratingFilmCritics = ratingFilmCritics,
          ratingFilmCriticsVoteCount = ratingFilmCriticsVoteCount,
          ratingAwait = ratingAwait,
          ratingAwaitCount = ratingAwaitCount,
          ratingRfCritics = ratingRfCritics,
          ratingRfCriticsVoteCount = ratingRfCriticsVoteCount,
          webUrl = webUrl,
          year = year,
          filmLength = filmLength,
          slogan = slogan,
          description = description,
          shortDescription = shortDescription,
          editorAnnotation = editorAnnotation,
          isTicketsAvailable = isTicketsAvailable,
          productionStatus = productionStatus,
          type = type,
          ratingMpaa = ratingMpaa,
          ratingAgeLimits = ratingAgeLimits,
          countries = countries,
          genres = genres,
          startYear = startYear,
          endYear = endYear,
          serial = serial,
          shortFilm = shortFilm,
          completed = completed,
          hasImax = hasImax,
          has3D = has3D,
          lastSync = lastSync
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<FilmInfoDTO> = this.constructorRef ?:
          FilmInfoDTO::class.java.getDeclaredConstructor(Int::class.javaObjectType,
          String::class.java, String::class.java, String::class.java, String::class.java,
          String::class.java, String::class.java, String::class.java, String::class.java,
          Int::class.javaObjectType, Double::class.javaObjectType, Int::class.javaObjectType,
          Double::class.javaObjectType, String::class.java, Double::class.javaObjectType,
          Int::class.javaObjectType, Double::class.javaObjectType, Int::class.javaObjectType,
          Double::class.javaObjectType, Int::class.javaObjectType, Double::class.javaObjectType,
          Int::class.javaObjectType, String::class.java, Int::class.javaObjectType,
          Int::class.javaObjectType, String::class.java, String::class.java, String::class.java,
          String::class.java, Boolean::class.javaObjectType, String::class.java, String::class.java,
          String::class.java, String::class.java, List::class.java, List::class.java,
          String::class.java, String::class.java, Boolean::class.javaObjectType,
          Boolean::class.javaObjectType, Boolean::class.javaObjectType,
          Boolean::class.javaObjectType, Boolean::class.javaObjectType, String::class.java,
          Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          kinopoiskId,
          imdbId,
          nameRu,
          nameEn,
          nameOriginal,
          posterUrl,
          posterUrlPreview,
          coverUrl,
          logoUrl,
          reviewsCount,
          ratingGoodReview,
          ratingGoodReviewVoteCount,
          ratingKinopoisk,
          ratingKinopoiskVoteCount,
          ratingImdb,
          ratingImdbVoteCount,
          ratingFilmCritics,
          ratingFilmCriticsVoteCount,
          ratingAwait,
          ratingAwaitCount,
          ratingRfCritics,
          ratingRfCriticsVoteCount,
          webUrl,
          year,
          filmLength,
          slogan,
          description,
          shortDescription,
          editorAnnotation,
          isTicketsAvailable,
          productionStatus,
          type,
          ratingMpaa,
          ratingAgeLimits,
          countries,
          genres,
          startYear,
          endYear,
          serial,
          shortFilm,
          completed,
          hasImax,
          has3D,
          lastSync,
          mask0, mask1,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: FilmInfoDTO?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("kinopoiskId")
    nullableIntAdapter.toJson(writer, value_.kinopoiskId)
    writer.name("imdbId")
    nullableStringAdapter.toJson(writer, value_.imdbId)
    writer.name("nameRu")
    nullableStringAdapter.toJson(writer, value_.nameRu)
    writer.name("nameEn")
    nullableStringAdapter.toJson(writer, value_.nameEn)
    writer.name("nameOriginal")
    nullableStringAdapter.toJson(writer, value_.nameOriginal)
    writer.name("posterUrl")
    nullableStringAdapter.toJson(writer, value_.posterUrl)
    writer.name("posterUrlPreview")
    nullableStringAdapter.toJson(writer, value_.posterUrlPreview)
    writer.name("coverUrl")
    nullableStringAdapter.toJson(writer, value_.coverUrl)
    writer.name("logoUrl")
    nullableStringAdapter.toJson(writer, value_.logoUrl)
    writer.name("reviewsCount")
    nullableIntAdapter.toJson(writer, value_.reviewsCount)
    writer.name("ratingGoodReview")
    nullableDoubleAdapter.toJson(writer, value_.ratingGoodReview)
    writer.name("ratingGoodReviewVoteCount")
    nullableIntAdapter.toJson(writer, value_.ratingGoodReviewVoteCount)
    writer.name("ratingKinopoisk")
    nullableDoubleAdapter.toJson(writer, value_.ratingKinopoisk)
    writer.name("ratingKinopoiskVoteCount")
    nullableStringAdapter.toJson(writer, value_.ratingKinopoiskVoteCount)
    writer.name("ratingImdb")
    nullableDoubleAdapter.toJson(writer, value_.ratingImdb)
    writer.name("ratingImdbVoteCount")
    nullableIntAdapter.toJson(writer, value_.ratingImdbVoteCount)
    writer.name("ratingFilmCritics")
    nullableDoubleAdapter.toJson(writer, value_.ratingFilmCritics)
    writer.name("ratingFilmCriticsVoteCount")
    nullableIntAdapter.toJson(writer, value_.ratingFilmCriticsVoteCount)
    writer.name("ratingAwait")
    nullableDoubleAdapter.toJson(writer, value_.ratingAwait)
    writer.name("ratingAwaitCount")
    nullableIntAdapter.toJson(writer, value_.ratingAwaitCount)
    writer.name("ratingRfCritics")
    nullableDoubleAdapter.toJson(writer, value_.ratingRfCritics)
    writer.name("ratingRfCriticsVoteCount")
    nullableIntAdapter.toJson(writer, value_.ratingRfCriticsVoteCount)
    writer.name("webUrl")
    nullableStringAdapter.toJson(writer, value_.webUrl)
    writer.name("year")
    nullableIntAdapter.toJson(writer, value_.year)
    writer.name("filmLength")
    nullableIntAdapter.toJson(writer, value_.filmLength)
    writer.name("slogan")
    nullableStringAdapter.toJson(writer, value_.slogan)
    writer.name("description")
    nullableStringAdapter.toJson(writer, value_.description)
    writer.name("shortDescription")
    nullableStringAdapter.toJson(writer, value_.shortDescription)
    writer.name("editorAnnotation")
    nullableStringAdapter.toJson(writer, value_.editorAnnotation)
    writer.name("isTicketsAvailable")
    nullableBooleanAdapter.toJson(writer, value_.isTicketsAvailable)
    writer.name("productionStatus")
    nullableStringAdapter.toJson(writer, value_.productionStatus)
    writer.name("type")
    nullableStringAdapter.toJson(writer, value_.type)
    writer.name("ratingMpaa")
    nullableStringAdapter.toJson(writer, value_.ratingMpaa)
    writer.name("ratingAgeLimits")
    nullableStringAdapter.toJson(writer, value_.ratingAgeLimits)
    writer.name("countries")
    nullableListOfCountryAdapter.toJson(writer, value_.countries)
    writer.name("genres")
    nullableListOfGenreAdapter.toJson(writer, value_.genres)
    writer.name("startYear")
    nullableStringAdapter.toJson(writer, value_.startYear)
    writer.name("endYear")
    nullableStringAdapter.toJson(writer, value_.endYear)
    writer.name("serial")
    nullableBooleanAdapter.toJson(writer, value_.serial)
    writer.name("shortFilm")
    nullableBooleanAdapter.toJson(writer, value_.shortFilm)
    writer.name("completed")
    nullableBooleanAdapter.toJson(writer, value_.completed)
    writer.name("hasImax")
    nullableBooleanAdapter.toJson(writer, value_.hasImax)
    writer.name("has3D")
    nullableBooleanAdapter.toJson(writer, value_.has3D)
    writer.name("lastSync")
    nullableStringAdapter.toJson(writer, value_.lastSync)
    writer.endObject()
  }
}
